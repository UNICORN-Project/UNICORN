# Nginx on UNICORN設定
# 前提：Nginxがインストール済みでconfが「/etc/nginx/nginx.conf」として説明
# 「/etc/nginx/nginx.conf」の「http {」の最後に以下追加
# include /etc/nginx/conf.d/*.conf;

# S3にリバースプロキシする為にAWSのDNSを更新する
resolver 10.0.0.2 valid=5s;
# リバースプロキシ設定
proxy_cache_path /var/www/cache/nginx/cache levels=1:2 keys_zone=anlimited:8m max_size=50m inactive=120m;
proxy_temp_path /var/www/cache/nginx/tmp;

# logのフォーマット
set_real_ip_from 10.0.0.0/24;
set_real_ip_from 10.0.1.0/24;
set_real_ip_from 10.0.2.0/24;
set_real_ip_from 10.0.3.0/24;
set_real_ip_from 10.0.4.0/24;
# ELBにSSLを処理させる場合はコチラを利用する
#real_ip_header      X-Forwarded-For;
# ELBのProxyProtocolを有効にして、Nginx側でSSLを処理する場合はコチラを利用する
real_ip_header      proxy_protocol;
log_format proxytypelog '$proxy_protocol_addr $remote_addr $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"';

# アプリAPI用
server {
	# 環境の設定
	set $workspace "";
	if (-f '/var/www/.dev'){
		set $workspace "dev";
	}

	listen                    80;
	# SSLとSpdyとProxyProtocol
	# ELBのProxyProtocolを使ってSPDYを有効にする場合は以下を利用する
	listen                    443 ssl http2 proxy_protocol;
	# ELBのProxyProtocolを使は無いでSPDYを有効にする場合は以下を利用する
	#listen                    443 ssl http2;
	# ELBでSSLが終端する場合、以下は不要
	ssl_certificate           /var/www/.ssl/private.pem;
	ssl_certificate_key       /var/www/.ssl/private.key;
	ssl_session_timeout       5m;
	ssl_session_cache         shared:SSL:60m;
	ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers               HIGH:!aNULL:!MD5;
	ssl_prefer_server_ciphers on;

	server_name devapiservice.domain apiservice.domain; # 取得したドメインを指定してください
	# ドキュメントルートを指定して下さい
	# Linuxの場合
	root       /var/www/release/lib/ProjectPackage/apidocs; #環境に合わせて適宜変更して下さい
	access_log /var/www/logs/api_access.log proxytypelog;
	error_log  /var/www/logs/api_error.log debug;
	index      index.php;

	# ELBじゃないホントのIPアドレスを取得するようにする設定
	set_real_ip_from 10.0.0.0/24;
	set_real_ip_from 10.0.1.0/24;
	set_real_ip_from 10.0.2.0/24;
	set_real_ip_from 10.0.3.0/24;
	set_real_ip_from 10.0.4.0/24;
	real_ip_header   X-Forwarded-For;

	# アップロード許容サイズを指定
	client_max_body_size 5M;

	# HSTSを有効化(SSL強制の場合はコメントアウトを外す)
	add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';

	# UAからのアプリバージョンを取得
	set $appdisplayversion "";
	set $appversion "";
	if ($http_user_agent ~ [A-Za-z0-9]+\/(\d\.\d\.\d+)) {
		set $appdisplayversion $1;
	}
	if ($http_user_agent ~ [A-Za-z0-9]+\/\d\.\d\.\d+\/([A-Za-z0-9\.]+)) {
		set $appversion $1;
	}

	# AUTO-REST-アプリAPI用のリライト設定
	location ~ /$ {
		rewrite /$ /index.php?_c_=api/Rest&_a_=UIDAuthAndExecute&_r_=&_o_=xml&_v_=$appversion&_dv_=$appdisplayversion;
	}

	location ~ \.(html|json|xml|csv|tsv) {
		rewrite /(.*)?\.(.*)$ /index.php?_c_=api/Rest&_a_=UIDAuthAndExecute&_r_=$1&_o_=$2&_v_=$appversion&_dv_=$appdisplayversion;
	}

	# PHP実行環境設定
	location ~ \.php$ {
		try_files     $uri =404;
		fastcgi_read_timeout 600;
		fastcgi_buffers 8 16k;
		fastcgi_buffer_size 32k;
		fastcgi_max_temp_file_size 0;
		gzip off;
		# PHP-FPM用
		fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_script_name;
		fastcgi_param PHP_VALUE "upload_max_filesize = 5M";
		fastcgi_param PHP_VALUE "post_max_size=5M";
		#fastcgi_param _filter_ $_filter_;
		#fastcgi_param _availalefilter_ $_availalefilter_;
		include       fastcgi_params;
	}
}

# フロント用
server {
	# 環境の設定
	set $workspace "";
	if (-f '/var/www/.dev'){
		set $workspace "dev";
	}

	listen                    80;
	# SSLとSpdyとProxyProtocol
	# ELBのProxyProtocolを使ってSPDYを有効にする場合は以下を利用する
	listen                    443 ssl http2 proxy_protocol;
	# ELBのProxyProtocolを使は無いでSPDYを有効にする場合は以下を利用する
	#listen                    443 ssl http2;
	# ELBでSSLが終端する場合、以下は不要
	ssl_certificate           /var/www/.ssl/private.pem;
	ssl_certificate_key       /var/www/.ssl/private.key;
	ssl_session_timeout       5m;
	ssl_session_cache         shared:SSL:60m;
	ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers               HIGH:!aNULL:!MD5;
	ssl_prefer_server_ciphers on;

	server_name devservice.domain service.domain; # 取得したドメインを指定してください
	# ドキュメントルートを指定して下さい
	# Linuxの場合
	root       /var/www/release/lib/ProjectPackage/webdocs; #環境に合わせて適宜変更して下さい
	access_log /var/www/logs/web_access.log proxytypelog;
	error_log  /var/www/logs/web_error.log debug;
	index      index.html;

	# ELBじゃないホントのIPアドレスを取得するようにする設定
	set_real_ip_from 10.0.0.0/24;
	set_real_ip_from 10.0.1.0/24;
	set_real_ip_from 10.0.2.0/24;
	set_real_ip_from 10.0.3.0/24;
	set_real_ip_from 10.0.4.0/24;
	real_ip_header   X-Forwarded-For;

	# アップロード許容サイズを指定
	client_max_body_size 5M;

	# XXX httpは全てhttpsにリダイレクトする！
	set $redirect "";
	if ($scheme != https) {
		set $redirect "1";
	}
	if ($http_user_agent !~* ELB-HealthChecker) {
		set $redirect "${redirect}1";
	}
	if ($http_host ~ 'devwebservice.domain') {
		set $redirect "${redirect}1";
	}
	if ($http_host ~ 'webservice.domain') {
		set $redirect "${redirect}1";
	}
	# jsonはリダイレクトをキャンセルして、元htmlのプロトコルに準拠させる
	if ($request_uri ~ '.json') {
		set $redirect "${redirect}3";
	}
	if ($redirect = "111") {
		rewrite ^ https://$host$request_uri? permanent;
	}
	#if ($redirect = "112") {
	#	rewrite ^ http://$host$request_uri? permanent;
	#}

	# HSTSを有効化(SSL強制の場合はコメントアウトを外す)
	add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';

	# 開発環境用の共通ベーシック認証
	if (-f '/var/www/.dev'){
		set $auth_basic 'use basic area.';
	}
	if ($auth_basic != 'use basic area.'){
		set $auth_basic off;
	}
	# !!! ロードバランサーからのリクエストはベーシックしない！
	if ($http_user_agent ~* ELB-HealthChecker) {
		set $auth_basic off;
	}
	# デバック中は一旦封印！
	#auth_basic $auth_basic;
	#auth_basic_user_file /var/www/release/.htpasswd;

	# ディレクトリTOPのファイル無指定の場合index.htmlにリライトする設定
	location ~ /$ {
		rewrite (.*?)/$ $1/index.html;
	}

	location ^~ /fwm/assets/ {
		rewrite /fwm/assets/(.*) /fwm/assets/$1 break;
	}

	# ファイルアップローダー用のリライト設定(認証ナシ)
	# XXX 認証アリのファイルアップロードはREST-APIを利用して下さい
	#location ~ /api/uploadFiles\.(html|json|xml|csv|tsv) {
	#	rewrite (.*?)/api/uploadFiles\.(.*)$ $1/api/index.php?_c_=api/UploadFiles&_a_=save&_o_=$2;
	#}

	# 動的ファイルのダウンロードリンク用のリライト設定(認証アリ)
	location ~ /dynamiclink/(.+)\.(.+) {
		rewrite (.*?)/dynamiclink/(.*)\.(.*)$ $1/api/index.php?_c_=api/Rest&_a_=authAndExecute&_r_=UploadFiles&_o_=$3&_path_=$2.$3;
	}

	# 動的ファイルのダウンロードリンク用のリライト設定(認証ナシ)
	#location ~ /dynamiclink/(.+)\.(.+) {
	#	rewrite (.*?)/dynamiclink/(.*)\.(.*)$ $1/api/index.php?_c_=api/UploadFiles&_a_=load&_o_=$3&_path_=$2.$3;
	#}

	location ~ /(.+).xml {
		rewrite (.*?)/(.+).xml $1/$2.xml break;
	}

	# AUTO-REST-AjaxAPI用のリライト設定
	location ~ /api/(.+)\.(html|json|xml|csv|tsv) {
		rewrite (.*?)/api/(.*)\.(.*)$ $1/api/index.php?_c_=api/Rest&_a_=authAndExecute&_r_=$2&_o_=$3&_deep_=0;
	}

	# 管理ツール用のページはベーシック認証を外す
	# XXX アクセス認証はAccessTokenがやってくれるのでそれに任せる
	location ^~ /fwm/ {
		# このAPIはベーシック不要で常に許可
		satisfy any;
		allow   all;
		set     $auth_basic off;
		rewrite  /fwm/(.*)\.(.*) /index.php?_c_=fwm/$1&_o_=$2;
	}

	# UNICORN-MVC用のリライト設定
	location ~ \.(html|json|xml|csv|tsv) {
		rewrite /(.*)\.(.*)$ /index.php?_c_=$1&_o_=$2;
	}

	# PHP実行環境設定
	location ~ \.php$ {
		try_files            $uri =404;
		fastcgi_read_timeout 600;
		fastcgi_buffers 8 16k;
		fastcgi_buffer_size 32k;
		fastcgi_max_temp_file_size 0;
		gzip off;
		# PHP-FPM用
		fastcgi_pass         unix:/var/run/php-fpm/php-fpm.sock;
		fastcgi_param        SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param        HTTPS on;
		fastcgi_param        PATH_INFO $fastcgi_script_name;
		fastcgi_param        RewriteRule "([^+]*)?\.(.*)＄ index.php?_c_=＄1&_o_=＄2";
		fastcgi_param        ReverseRewriteRule "\?_c_\=([^+]*)?\&_o_\=(.*) ./＄1.＄2";
		fastcgi_param        PHP_VALUE "upload_max_filesize = 5M";
		fastcgi_param        PHP_VALUE "post_max_size=5M";
		#fastcgi_param        _filter_ $_filter_;
		#fastcgi_param        _availalefilter_ $_availalefilter_;
		include              fastcgi_params;
	}
}

# 管理ツール用
server {
	# 環境の設定
	set $workspace "";
	if (-f '/var/www/.dev'){
		set $workspace "dev";
	}

	listen                    80;
	# SSLとSpdyとProxyProtocol
	# ELBのProxyProtocolを使ってSPDYを有効にする場合は以下を利用する
	listen                    443 ssl http2 proxy_protocol;
	# ELBのProxyProtocolを使は無いでSPDYを有効にする場合は以下を利用する
	#listen                    443 ssl http2;
	# ELBでSSLが終端する場合、以下は不要
	ssl_certificate           /var/www/.ssl/private.pem;
	ssl_certificate_key       /var/www/.ssl/private.key;
	ssl_session_timeout       5m;
	ssl_session_cache         shared:SSL:60m;
	ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers               HIGH:!aNULL:!MD5;
	ssl_prefer_server_ciphers on;

	server_name devfwmservice.domain fwmservice.domain; # 取得したドメインを指定してください
	# ドキュメントルートを指定して下さい
	# Linuxの場合
	root       /var/www/release/lib/FrameworkManager/managedocs; #環境に合わせて適宜変更して下さい
	access_log /var/www/logs/fwm_access.log proxytypelog
	error_log  /var/www/logs/fwm_error.log debug;
	index      index.html;

	# ELBじゃないホントのIPアドレスを取得するようにする設定
	set_real_ip_from 10.0.0.0/24;
	set_real_ip_from 10.0.1.0/24;
	set_real_ip_from 10.0.2.0/24;
	set_real_ip_from 10.0.3.0/24;
	set_real_ip_from 10.0.4.0/24;
	real_ip_header   X-Forwarded-For;

	# アップロード許容サイズを指定
	client_max_body_size 5M;

	# XXX httpは全てhttpsにリダイレクトする！
	set $redirect "";
	if ($scheme != https) {
		set $redirect "1";
	}
	if ($http_user_agent !~* ELB-HealthChecker) {
		set $redirect "${redirect}1";
	}
	if ($http_host ~ 'service.domain') {
		set $redirect "${redirect}1";
	}
	# jsonはリダイレクトをキャンセルして、元htmlのプロトコルに準拠させる
	if ($request_uri ~ '.json') {
		set $redirect "${redirect}3";
	}
	if ($redirect = "111") {
		rewrite ^ https://$host$request_uri? permanent;
	}

	# HSTSを有効化(SSL強制の場合はコメントアウトを外す)
	add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';

	# 管理ツールはベーシック認証を付ける
	auth_basic 'use basic area.';
	auth_basic_user_file /var/www/release/.htpasswd;

	# ファイル無指定のURLをindex.phpにリライトする設定
	location ~ /$ {
		rewrite (.*?)/$ $1/index.php?_c_=Index&_o_=html;
	}

	# frameworkmanagerが利用するajax用のリライト設定
	location ~ /api/(.+)\.(html|json|xml|csv|tsv) {
		rewrite (.*?)/api/(.*)\.(.*)$ $1/api/index.php?_c_=api/Rest&_a_=Execute&_r_=$2&_o_=$3&_deep_=0;
	}

	# frameworkmanagerが利用するajax用のリライト設定
	location ~ /xresouce/(.+)\.(html|json|xml|csv|tsv) {
		rewrite (.*?)/xresouce/(.*)\.(.*)$ $1/xresouce/index.php?_c_=api/Rest&_a_=authAndExecute&_r_=$2&_o_=$3&_deep_=0;
	}

	# frameworkmanagerが利用するauto-crud用のリライト設定
	location ~ /crud/(.*?)/(.+)\.(html|json|xml|csv|tsv) {
		#set $_filter_ false;
		set $_availalefilter_ false;
		rewrite (.*?)/crud/(.*?)/(.*)\.(.*)$ $1/crud/index.php?_c_=api/Rest&_a_=execute&_r_=$3&_o_=$4&_p_=$2&_deep_=0;
	}

	# frameworkmanagerが利用するauto-crud用のリライト設定
	location ~ /fwm-(.+?)-(.+?)_(html|json|xml|csv|tsv).html {
		rewrite (.*?)/fwm-(.+?)-(.+?).html$ $1/index.php?_c_=fwm&_a_=execute&_o_=html&target_project=$2&target_url=$3;
	}

	# frameworkmanagerが利用するUNICORN-MVC用のリライト設定
	location ~ \.(html|json|xml|csv) {
		rewrite /(.*)\.(.*)$ /index.php?_c_=$1&_o_=$2;
	}

	# PHP実行環境設定
	location ~ \.php$ {
		try_files            $uri =404;
		fastcgi_read_timeout 600;
		fastcgi_buffers 8 16k;
		fastcgi_buffer_size 32k;
		fastcgi_max_temp_file_size 0;
		gzip off;
		# PHP-FPM用
		fastcgi_pass         unix:/var/run/php-fpm/php-fpm.sock;
		fastcgi_param        SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param        HTTPS on;
		fastcgi_param        PATH_INFO $fastcgi_script_name;
		fastcgi_param        RewriteRule "([^+]*)?\.(.*)＄ index.php?_c_=＄1&_o_=＄2";
		fastcgi_param        ReverseRewriteRule "\?_c_\=([^+]*)?\&_o_\=(.*) ./＄1.＄2";
		fastcgi_param        PHP_VALUE "upload_max_filesize = 5M";
		fastcgi_param        PHP_VALUE "post_max_size=5M";
		#fastcgi_param        _filter_ $_filter_;
		#fastcgi_param        _availalefilter_ $_availalefilter_;
		include              fastcgi_params;
	}
}
